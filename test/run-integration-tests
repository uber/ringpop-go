#!/bin/bash
#
# Run integration tests for ringpop-go.
#
set -eo pipefail

# Import common functions and variables
. "${0%/*}/lib.sh"

declare tap_filter="${ringpop_common_dir}/test/tap-filter"

declare test_cluster_sizes="1 2 3 4 5 10"
declare test_result=

declare temp_dir="$(mktemp -d)"

# Check node is installed
if ! type node &>/dev/null; then
    echo "ERROR: missing 'node'" >&2
    exit 1
fi

#
# Same as builtin wait, but return code is the number of background processes
# that exited with a non-zero code.
#
wait-all() {
    local -i failed=0

    # We need to explicitly loop through all background jobs and specify the
    # pids to `wait`, otherwise `wait` doesn't return the exit code.
    for pid in $(jobs -p); do
        wait $pid || let "failed+=1"
    done

    return $failed
}

#
# Echos and runs the specified command.
#
run() {
    echo "+ $@" >&2
    "$@"
}

# Build the testpop binary.
#
build-testpop() {
    cd "$project_root"
    run make testpop
}

#
# Run test with specified cluster size.
#
# $1: cluster size
#
run-test-for-cluster-size() {
    local cluster_size=$1
    local err=0
    local output_file="${temp_dir}/${cluster_size}.out"

    # Run the tests and buffer the output to a log file. We'll display it later
    # if the test fails. This avoids interleaving of output to the terminal
    # when tests are running in parallel.
    node "${ringpop_common_dir}/test/it-tests.js" \
        -s "[$1]" \
        --enable-feature reaping-faulty-nodes \
        --enable-feature bidirectional-full-syncs \
        --enable-feature partition-healing \
        --enable-feature labels \
        "${project_root}/testpop" &>$output_file || err=$?

    if [ $PIPESTATUS -gt 0 ]; then
        echo "ERROR: Test errored for cluster size $cluster_size" | \
            prefix "test-errors-${cluster_size}" >&2
        return 1
    fi

    if [ $err -ne 0 ]; then
        # If the test failed, print a message and display the failures
        {
            echo "FAIL: Test failed for cluster size $cluster_size"
            # Output the test data through tap-filter, which discards success
            cat "$output_file" |$tap_filter 2>&1

        } | prefix "test-errors-${cluster_size}" >&2

        return 1
    fi
}

#
# Run the integration tests against the testpop binary, in parallel.
#
run-tests() {
    for cluster_size in $test_cluster_sizes; do
        echo "Spawning test for cluster size ${cluster_size}..." |prefix "test-runner"
        run-test-for-cluster-size $cluster_size &
    done

    {
        echo
        echo "Waiting for tests to complete."
        echo
        echo "To monitor test output (verbose), run:"
        echo "    tail -f ${temp_dir}/*.out"
        echo
    } \
        |prefix "test-runner"

    wait-all
}

#
# Run the integration tests against the testpop binary, in serial.
#
run-tests-serial() {
    local exit_code=0

    for cluster_size in $test_cluster_sizes; do
        echo "Running test for cluster size ${cluster_size}..." |prefix "test-runner"
        run-test-for-cluster-size $cluster_size || exit_code=1
    done

    return $exit_code
}

# Fetch and build in parallel
{ fetch-ringpop-common "test" 2>&1|prefix "fetch ringpop-common"; } &
{ build-testpop 2>&1|prefix "build testpop"; } &
wait-all

# Run integration tests
#run-tests
run-tests-serial
test_result=$?

if [ $test_result -eq 0 ]; then
    echo "Tests passed"
    rm -rf "$temp_dir"
else
    echo "Tests failed" >&2
fi

exit $test_result
