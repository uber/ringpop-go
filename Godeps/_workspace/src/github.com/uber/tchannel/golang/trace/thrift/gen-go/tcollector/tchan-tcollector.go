// Autogenerated by thrift-gen. Do not modify.
package tcollector

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel/golang/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

type TChanTCollector interface {
	MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error)
	Submit(ctx thrift.Context, span *Span) (*Response, error)
}

// Implementation of a client and service handler.

type tchanTCollectorClient struct {
	client thrift.TChanClient
}

func NewTChanTCollectorClient(client thrift.TChanClient) TChanTCollector {
	return &tchanTCollectorClient{client: client}
}

func (c *tchanTCollectorClient) MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error) {
	var resp MultiSubmitResult
	args := MultiSubmitArgs{
		Spans: spans,
	}
	success, err := c.client.Call(ctx, "TCollector", "multi_submit", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

func (c *tchanTCollectorClient) Submit(ctx thrift.Context, span *Span) (*Response, error) {
	var resp SubmitResult
	args := SubmitArgs{
		Span: span,
	}
	success, err := c.client.Call(ctx, "TCollector", "submit", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

type tchanTCollectorServer struct {
	handler TChanTCollector
}

func NewTChanTCollectorServer(handler TChanTCollector) thrift.TChanServer {
	return &tchanTCollectorServer{handler}
}

func (s *tchanTCollectorServer) Service() string {
	return "TCollector"
}

func (s *tchanTCollectorServer) Methods() []string {
	return []string{
		"multi_submit",
		"submit",
	}
}

func (s *tchanTCollectorServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "multi_submit":
		return s.handleMultiSubmit(ctx, protocol)
	case "submit":
		return s.handleSubmit(ctx, protocol)
	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanTCollectorServer) handleMultiSubmit(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req MultiSubmitArgs
	var res MultiSubmitResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.MultiSubmit(ctx, req.Spans)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanTCollectorServer) handleSubmit(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req SubmitArgs
	var res SubmitResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Submit(ctx, req.Span)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
