// Autogenerated by thrift-gen. Do not modify.
package test

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

type TChanSecondService interface {
	Echo(ctx thrift.Context, arg string) (string, error)
}

type TChanSimpleService interface {
	Call(ctx thrift.Context, arg *Data) (*Data, error)
	Simple(ctx thrift.Context) error
}

// Implementation of a client and service handler.

type tchanSecondServiceClient struct {
	client thrift.TChanClient
}

func newTChanSecondServiceClient(client thrift.TChanClient) *tchanSecondServiceClient {
	return &tchanSecondServiceClient{
		client,
	}
}

func NewTChanSecondServiceClient(client thrift.TChanClient) TChanSecondService {
	return newTChanSecondServiceClient(client)
}

func (c *tchanSecondServiceClient) Echo(ctx thrift.Context, arg string) (string, error) {
	var resp SecondServiceEchoResult
	args := SecondServiceEchoArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, "SecondService", "Echo", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

type tchanSecondServiceServer struct {
	handler TChanSecondService
}

func newTChanSecondServiceServer(handler TChanSecondService) *tchanSecondServiceServer {
	return &tchanSecondServiceServer{
		handler,
	}
}

func NewTChanSecondServiceServer(handler TChanSecondService) thrift.TChanServer {
	return newTChanSecondServiceServer(handler)
}

func (s *tchanSecondServiceServer) Service() string {
	return "SecondService"
}

func (s *tchanSecondServiceServer) Methods() []string {
	return []string{
		"Echo",
	}
}

func (s *tchanSecondServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "Echo":
		return s.handleEcho(ctx, protocol)
	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanSecondServiceServer) handleEcho(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req SecondServiceEchoArgs
	var res SecondServiceEchoResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Echo(ctx, req.Arg)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = &r
	}

	return err == nil, &res, nil
}

type tchanSimpleServiceClient struct {
	client thrift.TChanClient
}

func newTChanSimpleServiceClient(client thrift.TChanClient) *tchanSimpleServiceClient {
	return &tchanSimpleServiceClient{
		client,
	}
}

func NewTChanSimpleServiceClient(client thrift.TChanClient) TChanSimpleService {
	return newTChanSimpleServiceClient(client)
}

func (c *tchanSimpleServiceClient) Call(ctx thrift.Context, arg *Data) (*Data, error) {
	var resp SimpleServiceCallResult
	args := SimpleServiceCallArgs{
		Arg: arg,
	}
	success, err := c.client.Call(ctx, "SimpleService", "Call", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

func (c *tchanSimpleServiceClient) Simple(ctx thrift.Context) error {
	var resp SimpleServiceSimpleResult
	args := SimpleServiceSimpleArgs{}
	success, err := c.client.Call(ctx, "SimpleService", "Simple", &args, &resp)
	if err == nil && !success {
		if e := resp.SimpleErr; e != nil {
			err = e
		}
	}

	return err
}

type tchanSimpleServiceServer struct {
	handler TChanSimpleService
}

func newTChanSimpleServiceServer(handler TChanSimpleService) *tchanSimpleServiceServer {
	return &tchanSimpleServiceServer{
		handler,
	}
}

func NewTChanSimpleServiceServer(handler TChanSimpleService) thrift.TChanServer {
	return newTChanSimpleServiceServer(handler)
}

func (s *tchanSimpleServiceServer) Service() string {
	return "SimpleService"
}

func (s *tchanSimpleServiceServer) Methods() []string {
	return []string{
		"Call",
		"Simple",
	}
}

func (s *tchanSimpleServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "Call":
		return s.handleCall(ctx, protocol)
	case "Simple":
		return s.handleSimple(ctx, protocol)
	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanSimpleServiceServer) handleCall(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req SimpleServiceCallArgs
	var res SimpleServiceCallResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Call(ctx, req.Arg)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanSimpleServiceServer) handleSimple(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req SimpleServiceSimpleArgs
	var res SimpleServiceSimpleResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	err :=
		s.handler.Simple(ctx)

	if err != nil {
		switch v := err.(type) {
		case *SimpleErr:
			res.SimpleErr = v
		default:
			return false, nil, err
		}
	} else {
	}

	return err == nil, &res, nil
}
